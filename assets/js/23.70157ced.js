(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{530:function(e,i,v){"use strict";v.r(i);var _=v(44),t=Object(_.a)({},(function(){var e=this,i=e.$createElement,v=e._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("img",{attrs:{src:"https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png",alt:"Image"}})]),e._v(" "),v("blockquote",[v("p",[e._v("这篇基本介绍只介绍 GitLab CI，不会写具体的使用细节，旨在让新接触 GitLab CI 的同学先对它有个基本的认识，直接看官网文档可能需要多花点时间才能理清一些概念。")])]),e._v(" "),v("blockquote",[v("p",[e._v("GitLab CI 的设计很灵活，有多种使用方案，我在接下来会针对最常用的几种情况写一系列包括实现细节步骤的文章。")])]),e._v(" "),v("h3",{attrs:{id:"前置需求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前置需求"}},[e._v("#")]),e._v(" 前置需求")]),e._v(" "),v("p",[e._v("当前有 3 台服务器 develop, staging, production 分别对应代码仓库上的三个分支：develop, staging, master。")]),e._v(" "),v("p",[e._v("要求 push 代码到仓库时会触发 CI 的执行：")]),e._v(" "),v("ol",[v("li",[e._v("build app")]),e._v(" "),v("li",[e._v("testing app")]),e._v(" "),v("li",[e._v("deploy to server")])]),e._v(" "),v("p",[e._v("代码 push 到哪个分支，就把项目部署到相应的服务器上。")]),e._v(" "),v("h3",{attrs:{id:"gitlab-ci-的重要概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-的重要概念"}},[e._v("#")]),e._v(" GitLab CI 的重要概念")]),e._v(" "),v("p",[e._v("要理解 GitLab CI 的工作方式，必须要理解两个概念：")]),e._v(" "),v("ul",[v("li",[e._v("Pipeline")]),e._v(" "),v("li",[e._v("Runner")])]),e._v(" "),v("p",[e._v("上面说的 CI 执行过程就是 "),v("code",[e._v("pipeline")]),e._v("，它定义了项目的构建、测试、部署等的执行过程。")]),e._v(" "),v("p",[e._v("我们需要在每个项目上定义一个 "),v("code",[e._v("pipeline")]),e._v("。")]),e._v(" "),v("p",[e._v("定义一个 "),v("code",[e._v("pipeline")]),e._v(" 就是在项目代码根目录创建文件："),v("code",[e._v(".gitlab-ci.yml")]),e._v(".")]),e._v(" "),v("p",[e._v("定义好 "),v("code",[e._v("pipeline")]),e._v(" 后，GitLab CI 会读取并执行这个 "),v("code",[e._v("pipeline")]),e._v("，执行的程序叫做 "),v("code",[e._v("Runner")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("Runner")]),e._v(" 是负责执行 "),v("code",[e._v("pipeline")]),e._v(" 的程序。")]),e._v(" "),v("p",[e._v("通常 "),v("code",[e._v("Runner")]),e._v(" 需要我们自己安装并运行在自己的服务器上，当然也可以使用 gitlab.com 官方提供的免费的 Shared Runner 服务。")]),e._v(" "),v("h3",{attrs:{id:"gitlab-ci-的工作方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-的工作方式"}},[e._v("#")]),e._v(" GitLab CI 的工作方式")]),e._v(" "),v("ul",[v("li",[e._v("Pipeline 的触发")])]),e._v(" "),v("p",[e._v("当开发者 Push 代码到某个分支时，如果我们定义了 Pipeline，也就是代码根目录中有 "),v("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件，GitLab 会自动触发 Pipeline 的执行。")]),e._v(" "),v("ul",[v("li",[e._v("Pipeline 的执行")])]),e._v(" "),v("p",[e._v("Pipeline 执行时，首先会 pull 下来被触发分支的代码，然后执行你在 pipline 中定义的 Job，Job 是你指定的一些 shell scripts，它就是你构建项目的逻辑。")]),e._v(" "),v("h3",{attrs:{id:"小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),v("p",[e._v("简单介绍一下 GitLab CI 的几个重要概念，接下来会通过实例来详细讲解 GitLab CI 的使用。")])])}),[],!1,null,null,null);i.default=t.exports}}]);